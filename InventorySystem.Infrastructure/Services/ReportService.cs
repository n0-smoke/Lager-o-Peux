using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using InventorySystem.Domain.Models;
using InventorySystem.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace InventorySystem.Infrastructure.Services
{
    public class ReportService
    {
        private readonly AppDbContext _context;
        private readonly ShipmentService _shipmentService;

        static ReportService()
        {
            // Set QuestPDF license to community
            QuestPDF.Settings.License = LicenseType.Community;
        }

        public ReportService(AppDbContext context, ShipmentService shipmentService)
        {
            _context = context;
            _shipmentService = shipmentService;
        }

        /// <summary>
        /// Generates a PDF report for a shipment with all its details
        /// </summary>
        /// <param name="shipmentId">The ID of the shipment to generate a report for</param>
        /// <param name="outputPath">The path where the PDF file should be saved</param>
        /// <param name="currentUserName">Optional: The name of the current user to include in the report</param>
        /// <returns>The full path to the generated PDF file</returns>
        public string GenerateShipmentReport(int shipmentId, string outputPath, string currentUserName = "")
        {
            try
            {
                // Load the shipment with all related data
                var shipment = _context.Shipments
                    .Include(s => s.Truck)
                    .Include(s => s.ShipmentItems)
                    .ThenInclude(si => si.InventoryItem)
                    .FirstOrDefault(s => s.Id == shipmentId);

                if (shipment == null)
                {
                    throw new ArgumentException($"Shipment with ID {shipmentId} not found.");
                }

                // Calculate the total weight and load percentage
                double totalWeight = _shipmentService.CalculateTotalWeight(shipment);
                double loadPercentage = _shipmentService.CalculateLoadPercentage(shipment);

                // Create a unique filename based on shipment ID and timestamp
                string fileName = $"Shipment_{shipment.Id}_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
                string fullPath = Path.Combine(outputPath, fileName);

                // Ensure the directory exists
                Directory.CreateDirectory(outputPath);

                // Determine load status and color
                string loadStatus;
                string loadStatusColor;

                if (loadPercentage > 100)
                {
                    loadStatus = "OVERLOADED [!!!]";
                    loadStatusColor = "#FF0000"; // Red
                }
                else if (loadPercentage > 90)
                {
                    loadStatus = "NEAR CAPACITY [!]";
                    loadStatusColor = "#FFA500"; // Orange
                }
                else
                {
                    loadStatus = "WITHIN CAPACITY [✓]";
                    loadStatusColor = "#008000"; // Green
                }

                // Generate the PDF document
                Document.Create(document =>
                {
                    document.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(50);
                        page.DefaultTextStyle(x => x.FontSize(10));

                        page.Header().Element(header =>
                        {
                            header.Row(row =>
                            {
                                row.RelativeItem().Column(column =>
                                {
                                    column.Item().AlignCenter().Text("SHIPMENT REPORT")
                                        .FontSize(20).Bold();

                                    column.Item().AlignRight().Text(text =>
                                    {
                                        text.Span($"Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}").FontSize(8);
                                    });

                                    if (!string.IsNullOrEmpty(currentUserName))
                                    {
                                        column.Item().AlignRight().Text(text =>
                                        {
                                            text.Span($"Generated by: {currentUserName}").FontSize(8);
                                        });
                                    }
                                });
                            });
                        });

                        page.Content().Element(content =>
                        {
                            // Shipment Details Section
                            content.Column(column =>
                            {
                                column.Item().BorderBottom(1).BorderColor(Colors.Grey.Medium).PaddingBottom(5)
                                    .Text("SHIPMENT DETAILS").Bold().FontSize(14);

                                column.Item().PaddingTop(5).Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(3);
                                    });

                                    table.Cell().Text("Shipment ID:").Bold();
                                    table.Cell().Text(shipment.Id.ToString());

                                    table.Cell().Text("Destination:").Bold();
                                    table.Cell().Text(shipment.Destination);

                                    table.Cell().Text("Direction:").Bold();
                                    table.Cell().Text(shipment.Direction.ToString());

                                    table.Cell().Text("Status:").Bold();
                                    table.Cell().Text(shipment.Status);

                                    table.Cell().Text("Scheduled Date:").Bold();
                                    table.Cell().Text(shipment.ScheduledDate != null ?
                                        shipment.ScheduledDate.ToString("yyyy-MM-dd") : "Not scheduled");

                                    table.Cell().Text("Created At:").Bold();
                                    table.Cell().Text(shipment.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss"));
                                });

                                // Truck Information Section
                                column.Item().PaddingTop(20).BorderBottom(1).BorderColor(Colors.Grey.Medium).PaddingBottom(5)
                                    .Text("TRUCK INFORMATION").Bold().FontSize(14);

                                column.Item().PaddingTop(5).Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(3);
                                    });

                                    table.Cell().Text("Truck Identifier:").Bold();
                                    table.Cell().Text(shipment.Truck.Identifier);

                                    table.Cell().Text("Maximum Capacity:").Bold();
                                    table.Cell().Text($"{shipment.Truck.MaxCapacityKg} kg");

                                    table.Cell().Text("Current Load:").Bold();
                                    table.Cell().Text($"{totalWeight} kg ({loadPercentage}%)");

                                    table.Cell().Text("Load Status:").Bold();
                                    table.Cell().Text(text =>
                                    {
                                        text.Span(loadStatus).FontColor(loadStatusColor);
                                    });
                                });

                                // Inventory Items Section
                                column.Item().PaddingTop(20).BorderBottom(1).BorderColor(Colors.Grey.Medium).PaddingBottom(5)
                                    .Text("INVENTORY ITEMS").Bold().FontSize(14);

                                if (shipment.ShipmentItems != null && shipment.ShipmentItems.Any())
                                {
                                    column.Item().PaddingTop(5).Table(table =>
                                    {
                                        // Define columns
                                        table.ColumnsDefinition(columns =>
                                        {
                                            columns.RelativeColumn(3); // Item Name
                                            columns.RelativeColumn(2); // Category
                                            columns.RelativeColumn(1); // Quantity
                                            columns.RelativeColumn(2); // Weight Per Unit
                                            columns.RelativeColumn(2); // Total Weight
                                        });

                                        // Add header row
                                        table.Header(header =>
                                        {
                                            header.Cell().Background(Colors.Grey.Lighten3).Text("Item Name").Bold();
                                            header.Cell().Background(Colors.Grey.Lighten3).Text("Category").Bold();
                                            header.Cell().Background(Colors.Grey.Lighten3).Text("Quantity").Bold();
                                            header.Cell().Background(Colors.Grey.Lighten3).Text("Weight/Unit(kg)").Bold();
                                            header.Cell().Background(Colors.Grey.Lighten3).Text("Total Weight(kg)").Bold();
                                        });

                                        // Add data rows
                                        foreach (var item in shipment.ShipmentItems)
                                        {
                                            double itemTotalWeight = item.InventoryItem.WeightPerUnit * item.Quantity;

                                            table.Cell().Text(TruncateString(item.InventoryItem.Name, 30));
                                            table.Cell().Text(TruncateString(item.InventoryItem.Category, 20));
                                            table.Cell().Text(item.Quantity.ToString());
                                            table.Cell().Text(item.InventoryItem.WeightPerUnit.ToString());
                                            table.Cell().Text(itemTotalWeight.ToString());
                                        }

                                        // Add total row
                                        table.Cell().ColumnSpan(4).AlignRight().Text("TOTAL:").Bold();
                                        table.Cell().Text(totalWeight.ToString()).Bold();
                                    });
                                }
                                else
                                {
                                    column.Item().PaddingTop(5).Text("No items in this shipment.").Italic();
                                }
                            });
                        });

                        page.Footer().AlignCenter().Text(text =>
                        {
                            text.Line("This is an automatically generated report from the").FontSize(8);
                            text.Line("Lager-o-Peux Inventory Management System.").FontSize(8);
                        });
                    });
                })
                .GeneratePdf(fullPath);

                return fullPath;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error generating PDF report: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Helper method to truncate strings to a specific length
        /// </summary>
        private string TruncateString(string input, int maxLength)
        {
            if (string.IsNullOrEmpty(input)) return string.Empty;
            return input.Length <= maxLength ? input : input.Substring(0, maxLength - 3) + "...";
        }
    }
}
